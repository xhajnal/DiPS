#Clear environment
rm(list = ls())
gc()
#Set working directory
setwd("C:/Users/klein/Documents/Uni/Hiwi_Tanja/bees_paper")
# load packages
library(ggplot2)
library(RColorBrewer)
col1 <- brewer.pal(n = 3, name = "Dark2")
# data frame for histogram
output2 <- data.frame(outcome = c("0", "1", "2", "3", "4", "5"),
values = c(92,117,130,101,47,13))
# histogram of BSCCs
p2 <- ggplot(output2, aes(x=outcome, y=values)) +
geom_bar(stat="identity", fill = "darkred") +
geom_text(aes(label=values), vjust=1.6, color="white", size=3.5) +
labs(x = "BSCCs for n=2",
y = "Frequency")
p2
# histogram of BSCCs
p2 <- ggplot(output2, aes(x=outcome, y=values)) +
geom_bar(stat="identity", fill = "darkred") +
geom_text(aes(label=values), vjust=1.6, color="white", size=3.5) +
labs(x = "Number of stinging bees",
y = "Frequency")
p2
#Clear environment
rm(list = ls())
gc()
#Set working directory
setwd("C:/Users/klein/Documents/Uni/Hiwi_Tanja/bees_paper")
# load packages
library(ggplot2)
library(rasterVis)
library(grid)
library(RColorBrewer)
library(geoelectrics)
library(binom)
col1 <- brewer.pal(n = 3, name = "Dark2")
my_dat <- read.delim('data.txt')
View(my_dat)
my_dat <- table('data.txt')
my_dat <- read.table('data.txt')
View(my_dat)
my_dat <- read.table('data.txt')
View(my_dat)
my_dat <- read.table('dat_parameters.txt')
View(my_dat)
my_dat <- read.table('dat_parameters.txt')
View(my_dat)
my_dat <- read.table('dat_parameters.txt', row.names=1)
View(my_dat)
my_dat <- read.table('dat_parameters.txt', row.names=1)
#read data for parameter values and rational function values
dat_params <- read.table('dat_parameters.txt', row.names=1)
dat_funcs  <- read.table('dat_functions.txt', row.names=1)
View(dat_params)
linear_p <- linear_params(dat_params['linear',1], dat_params['linear',2])
#compute linear and sigmoidal parameter values from 2 optimised points
linear_params <- function(r,d){
res <- c(r)
for(i in 1:9){
x <- r + i*d
res <- c(res, x)
}
return(res)
}
linear_p <- linear_params(dat_params['linear',1], dat_params['linear',2])
dat_params['linear'] <- linear_p
View(dat_params)
dat_params['linear',] <- linear_p
View(dat_params)
View(dat_params)
#read ranges of MH results
dat_mhranges <- read.table('mh_ranges.txt', row.names = 1)
#compute weights with min-max normalization
mhranges <- dat_mhranges['upper',] - dat_mhranges['lower',]
View(dat_funcs)
#for rational function values
rss_func_lin <- sum((dat_funcs['data',] - dat_funcs['linear',])^2)
norm_weights <- 1 - (mhranges - min(mhranges))/(max(mhranges) - min(mhranges))
View(norm_weights)
str(dat_funcs)
View(dat_funcs)
dat_funcs  <- read.table('dat_functions.txt', row.names = 1)
#compute linear and sigmoidal parameter values from optimised points
linear_params <- function(r,d){
res <- c(r)
for(i in 1:9){
x   <- r + i*d
res <- c(res, x)
}
return(res)
}
sigmoidal_params <- function(k,v,n,r){
res <- c(r)
for (i in 1:9){
x   <- r + ((v-r)/(1+(k/i)^n))
res <- c(res, x)
}
return(res)
}
linear_p              <- linear_params(dat_params['linear',1], dat_params['linear',2])
dat_params['linear',] <- linear_p
sigmoid_p                <- sigmoidal_params(dat_params['sigmoidal',1], dat_params['sigmoidal',2],
dat_params['sigmoidal',3], dat_params['sigmoidal',4])
dat_params['sigmoidal',] <- sigmoid_p
#for rational function values
rss_func_lin <- sum((dat_funcs['data',] - dat_funcs['linear',])^2)
rss_func_sig <- sum((dat_funcs['data',] - dat_funcs['sigmoidal',])^2)
#for parameter values (compared to agnostic model)
rss_param_lin <- sum((dat_params['agnostic',] - dat_params['linear',])^2)
#for parameter values, weighted by MH ranges
rss_param_lin_norm <- sum(((dat_params['agnostic',] - dat_params['linear',]) * norm_weights)^2)
rss_param_sig_norm <- sum(((dat_params['agnostic',] - dat_params['sigmoidal',]) * norm_weights)^2)
#for rational function values
aic_func_lin <- aic(n = 11, rss = rss_func_lin, k=2)
#AIC formula
aic <- function(n, rss, k){
n * log(rss/n) + 2*k
}
#for rational function values
aic_func_lin <- aic(n = 11, rss = rss_func_lin, k=2)
aic_func_sig <- aic(n = 11, rss = rss_func_sig, k=4)
#for parameter values
aic_param_lin <- aic(n = 10, rss = rss_param_lin, k = 2)
aic_param_sig <- aic(n = 10, rss = rss_param_sig, k = 4)
rss_param_sig <- sum((dat_params['agnostic',] - dat_params['sigmoidal',])^2)
aic_param_sig <- aic(n = 10, rss = rss_param_sig, k = 4)
#for parameter values, weighted by MH ranges
aic_param_lin_norm <- aic(n = 10, rss = rss_param_lin_norm, k = 2)
aic_param_sig_norm <- aic(n = 10, rss = rss_param_sig_norm, k = 4)
#for parameter values of linear model (compared to total sum of squares of agnostic model)
tss_param_agn <- sum((dat_params['agnostic',] - mean(dat_params['agnostic',]))^2)
View(dat_params)
dat_params['agnostic',]
mean(dat_params['agnostic',])
str(dat_params)
mean(dat_params[1,])
mean(dat_params[3,])
rowMeans(dat_params['agnostic'])
rowMeans(dat_params['agnostic',])
#for parameter values of linear model (compared to total sum of squares of agnostic model)
tss_param_agn <- sum((dat_params['agnostic',] - rowMeans(dat_params['agnostic',]))^2)
r2_param_lin  <- rsquared(rss_param_lin, tss_param_agn)
#R^2 formula
rsquared <- function(rss, tss){
1 - rss/tss
}
r2_param_lin  <- rsquared(rss_param_lin, tss_param_agn)
#for parameter values (compared to agnostic model)
rss_param_lin <- sum((dat_params['agnostic',] - dat_params['linear',])^2)
View(dat_params)
# linear parameter values
lin_func <- function(r,d){
res <- c(r)
for(i in 1:9){
x <- r + i*d
res <- c(res, x)
}
return(res)
}
linear_p <- lin_func(0.13846526809054494, 0.056555878757623655)
linear_p
#compute linear and sigmoidal parameter values from optimised points
linear_params <- function(r,d){
res <- c(r)
for(i in 1:9){
x   <- r + i*d
res <- c(res, x)
}
return(res)
}
ltrue <- linear_p
linear_p              <- linear_params(dat_params['linear',1], dat_params['linear',2])
#read data for parameter values (optimised points) and rational function values
dat_params <- read.table('dat_parameters.txt', row.names = 1)
#compute linear and sigmoidal parameter values from optimised points
linear_params <- function(r,d){
res <- c(r)
for(i in 1:9){
x   <- r + i*d
res <- c(res, x)
}
return(res)
}
linear_p              <- linear_params(dat_params['linear',1], dat_params['linear',2])
dat_params['linear',] <- linear_p
#for rational function values (compared to real data)
rss_func_lin <- sum((dat_funcs['data',] - dat_funcs['linear',])^2)
rss_func_sig <- sum((dat_funcs['data',] - dat_funcs['sigmoidal',])^2)
#for parameter values (compared to agnostic model)
rss_param_lin <- sum((dat_params['agnostic',] - dat_params['linear',])^2)
rss_param_sig <- sum((dat_params['agnostic',] - dat_params['sigmoidal',])^2)
#for parameter values, weighted by MH ranges
rss_param_lin_norm <- sum(((dat_params['agnostic',] - dat_params['linear',]) * norm_weights)^2)
rss_param_sig_norm <- sum(((dat_params['agnostic',] - dat_params['sigmoidal',]) * norm_weights)^2)
#AIC formula
aic <- function(n, rss, k){
n * log(rss/n) + 2*k
}
#for rational function values
aic_func_lin <- aic(n = 11, rss = rss_func_lin, k = 2)
aic_func_sig <- aic(n = 11, rss = rss_func_sig, k = 4)
#for parameter values
aic_param_lin <- aic(n = 10, rss = rss_param_lin, k = 2)
aic_param_sig <- aic(n = 10, rss = rss_param_sig, k = 4)
#for parameter values, weighted by MH ranges
aic_param_lin_norm <- aic(n = 10, rss = rss_param_lin_norm, k = 2)
aic_param_sig_norm <- aic(n = 10, rss = rss_param_sig_norm, k = 4)
#R^2 formula
rsquared <- function(rss, tss){
1 - rss/tss
}
#for parameter values of linear model (compared to total sum of squares of agnostic model)
tss_param_agn <- sum((dat_params['agnostic',] - rowMeans(dat_params['agnostic',]))^2)
r2_param_lin  <- rsquared(rss_param_lin, tss_param_agn)
#for parameter values, weighted by MH ranges
tss_param_agn_norm <- sum(((dat_params['agnostic',] - rowMeans(dat_params['agnostic',])) * norm_weights)^2)
r2_param_lin_norm  <- rsquared(rss_param_lin_norm, tss_param_agn_norm)
#compute residuals for parameter values of linear model
residuals_param_lin      <- dat_param['linear',] - dat_param['agnostic',]
residuals_param_lin_norm <- residuals_param_lin * norm_weights
source('~/Uni/Hiwi_Tanja/bees_paper/script/model_selection.R')
source('~/Uni/Hiwi_Tanja/bees_paper/script/model_selection.R')
source('~/Uni/Hiwi_Tanja/bees_paper/script/model_selection.R')
View(q_res)
#quantiles of residuals; rank from lowest to highest
q_res  <- as.list(sort(residuals_param_lin))
#quantiles of residuals; rank from lowest to highest
q_res  <- as.vector(sort(residuals_param_lin))
#quantiles of residuals; rank from lowest to highest
q_res  <- as.list(sort(residuals_param_lin))
#quantiles of normal distribution
q_norm <- qnorm(ppoints(1:10))
plot(x = q_norm, y = q_res, xlab = "Theoretical normal quantiles",
ylab = "Residual quantiles", pch = 19, xlim = c(-2,2), ylim = c(-0.1,0.1))
abline(lm(q_res ~ q_norm), lty = 2)
str(q_norm)
str(q_res)
View(q_res)
View(residuals_param_lin)
#quantiles of residuals; rank from lowest to highest
q_res  <- unlist(sort(residuals_param_lin))
#quantiles of residuals; rank from lowest to highest
q_res  <- unlist(unname(sort(residuals_param_lin)))
plot(x = q_norm, y = q_res, xlab = "Theoretical normal quantiles",
ylab = "Residual quantiles", pch = 19, xlim = c(-2,2), ylim = c(-0.1,0.1))
abline(lm(q_res ~ q_norm), lty = 2)
dev.off()
dev.off()
source('~/Uni/Hiwi_Tanja/bees_paper/script/model_selection.R')
dev.off()
dev.off()
source('~/Uni/Hiwi_Tanja/bees_paper/script/model_selection.R')
dev.off()
source('~/Uni/Hiwi_Tanja/bees_paper/script/model_selection.R')
source('~/Uni/Hiwi_Tanja/bees_paper/script/model_selection.R')
