// New Honeybee mass stinging model. A population of bees a_1, ..., a_n defending the hive decide to sting or not.
// Synchronous semantics, multiparametric 
dtmc 
 
r_i - probability to sting when i amount of pheromone present 
const double r_0;
const double r_1;
const double r_2;
const double r_3;
const double r_4;

module multi_param_bee_agents_5
       // Two types of states are present, b=0 and b=1, where b=0 flags inner/decision/nonleaf state and b=1 represents 'final'/leaf/BSCC state
       // b = 0 => ai - state of agent i: 3:init, 1:success, (stinging), -j: failure (not stinging) when j amount of pheromone present 
       // b = 1 => ai - state of the agent i: 0: not stinging, 1:stinging
       // this duality of ai meaning serves back-compatibility with properties from the old models
       a0 : [-4..3] init 3; 
       a1 : [-4..3] init 3; 
       a2 : [-4..3] init 3; 
       a3 : [-4..3] init 3; 
       a4 : [-4..3] init 3; 
       b : [0..1] init 0; 

       //  initial transition
       []   a0 = 3 & a1 = 3  & a2 = 3  & a3 = 3  & a4 = 3  & b = 0 -> 1.0*r_0*r_0*r_0*r_0*r_0: (a0'=1) & (a1'=1) & (a2'=1) & (a3'=1) & (a4'=1) + 5.0*r_0*r_0*r_0*r_0*(1-r_0): (a0'=1) & (a1'=1) & (a2'=1) & (a3'=1) & (a4'=0) + 10.0*r_0*r_0*r_0*(1-r_0)*(1-r_0): (a0'=1) & (a1'=1) & (a2'=1) & (a3'=0) & (a4'=0) + 10.0*r_0*r_0*(1-r_0)*(1-r_0)*(1-r_0): (a0'=1) & (a1'=1) & (a2'=0) & (a3'=0) & (a4'=0) + 5.0*r_0*(1-r_0)*(1-r_0)*(1-r_0)*(1-r_0): (a0'=1) & (a1'=0) & (a2'=0) & (a3'=0) & (a4'=0) + 1.0*(1-r_0)*(1-r_0)*(1-r_0)*(1-r_0)*(1-r_0): (a0'=0) & (a1'=0) & (a2'=0) & (a3'=0) & (a4'=0);

       // some ones, some nonpositive final transitions
       []   a0 = 0 & a1 = 0 & a2 = 0 & a3 = 0 & a4 = 0 & b = 0  -> (a0'= 0) & (a1'= 0) & (a2'= 0) & (a3'= 0) & (a4'= 0) & (b'=1);
       []   a0 = 1 & a1 = -1 & a2 = -1 & a3 = -1 & a4 = -1 & b = 0  -> (a0'= 1) & (a1'= 0) & (a2'= 0) & (a3'= 0) & (a4'= 0) & (b'=1);
       []   a0 = 1 & a1 = 1 & a2 = -2 & a3 = -2 & a4 = -2 & b = 0  -> (a0'= 1) & (a1'= 1) & (a2'= 0) & (a3'= 0) & (a4'= 0) & (b'=1);
       []   a0 = 1 & a1 = 1 & a2 = 1 & a3 = -3 & a4 = -3 & b = 0  -> (a0'= 1) & (a1'= 1) & (a2'= 1) & (a3'= 0) & (a4'= 0) & (b'=1);
       []   a0 = 1 & a1 = 1 & a2 = 1 & a3 = 1 & a4 = -4 & b = 0  -> (a0'= 1) & (a1'= 1) & (a2'= 1) & (a3'= 1) & (a4'= 0) & (b'=1);
       []   a0 = 1 & a1 = 1 & a2 = 1 & a3 = 1 & a4 = 1 & b = 0  -> (a0'= 1) & (a1'= 1) & (a2'= 1) & (a3'= 1) & (a4'= 1) & (b'=1);

       // some ones, some nonpositive transitions
       []   a0 = 1 & a1 = 0 & a2 = 0 & a3 = 0 & a4 = 0 & b = 0  -> 1.0*(1-(r_1 - r_0)/(1 - r_0))*(1-(r_1 - r_0)/(1 - r_0))*(1-(r_1 - r_0)/(1 - r_0))*(1-(r_1 - r_0)/(1 - r_0)): (a0'=1) & (a1'=-1) & (a2'=-1) & (a3'=-1) & (a4'=-1) + 4.0* ((r_1 - r_0)/(1 - r_0))*(1-(r_1 - r_0)/(1 - r_0))*(1-(r_1 - r_0)/(1 - r_0))*(1-(r_1 - r_0)/(1 - r_0)): (a0'=1) & (a1'=1) & (a2'=-1) & (a3'=-1) & (a4'=-1) + 6.0* ((r_1 - r_0)/(1 - r_0))* ((r_1 - r_0)/(1 - r_0))*(1-(r_1 - r_0)/(1 - r_0))*(1-(r_1 - r_0)/(1 - r_0)): (a0'=1) & (a1'=1) & (a2'=1) & (a3'=-1) & (a4'=-1) + 4.0* ((r_1 - r_0)/(1 - r_0))* ((r_1 - r_0)/(1 - r_0))* ((r_1 - r_0)/(1 - r_0))*(1-(r_1 - r_0)/(1 - r_0)): (a0'=1) & (a1'=1) & (a2'=1) & (a3'=1) & (a4'=-1) + 1.0* ((r_1 - r_0)/(1 - r_0))* ((r_1 - r_0)/(1 - r_0))* ((r_1 - r_0)/(1 - r_0))* ((r_1 - r_0)/(1 - r_0)): (a0'=1) & (a1'=1) & (a2'=1) & (a3'=1) & (a4'=1);
       []   a0 = 1 & a1 = 1 & a2 = 0 & a3 = 0 & a4 = 0 & b = 0  -> 1.0*(1-(r_2 - r_0)/(1 - r_0))*(1-(r_2 - r_0)/(1 - r_0))*(1-(r_2 - r_0)/(1 - r_0)): (a0'=1) & (a1'=1) & (a2'=-2) & (a3'=-2) & (a4'=-2) + 3.0* ((r_2 - r_0)/(1 - r_0))*(1-(r_2 - r_0)/(1 - r_0))*(1-(r_2 - r_0)/(1 - r_0)): (a0'=1) & (a1'=1) & (a2'=1) & (a3'=-2) & (a4'=-2) + 3.0* ((r_2 - r_0)/(1 - r_0))* ((r_2 - r_0)/(1 - r_0))*(1-(r_2 - r_0)/(1 - r_0)): (a0'=1) & (a1'=1) & (a2'=1) & (a3'=1) & (a4'=-2) + 1.0* ((r_2 - r_0)/(1 - r_0))* ((r_2 - r_0)/(1 - r_0))* ((r_2 - r_0)/(1 - r_0)): (a0'=1) & (a1'=1) & (a2'=1) & (a3'=1) & (a4'=1);
       []   a0 = 1 & a1 = 1 & a2 = -1 & a3 = -1 & a4 = -1 & b = 0  -> 1.0*(1-(r_2 - r_1)/(1 - r_1))*(1-(r_2 - r_1)/(1 - r_1))*(1-(r_2 - r_1)/(1 - r_1)): (a0'=1) & (a1'=1) & (a2'=-2) & (a3'=-2) & (a4'=-2) + 3.0* ((r_2 - r_1)/(1 - r_1))*(1-(r_2 - r_1)/(1 - r_1))*(1-(r_2 - r_1)/(1 - r_1)): (a0'=1) & (a1'=1) & (a2'=1) & (a3'=-2) & (a4'=-2) + 3.0* ((r_2 - r_1)/(1 - r_1))* ((r_2 - r_1)/(1 - r_1))*(1-(r_2 - r_1)/(1 - r_1)): (a0'=1) & (a1'=1) & (a2'=1) & (a3'=1) & (a4'=-2) + 1.0* ((r_2 - r_1)/(1 - r_1))* ((r_2 - r_1)/(1 - r_1))* ((r_2 - r_1)/(1 - r_1)): (a0'=1) & (a1'=1) & (a2'=1) & (a3'=1) & (a4'=1);
       []   a0 = 1 & a1 = 1 & a2 = 1 & a3 = 0 & a4 = 0 & b = 0  -> 1.0*(1-(r_3 - r_0)/(1 - r_0))*(1-(r_3 - r_0)/(1 - r_0)): (a0'=1) & (a1'=1) & (a2'=1) & (a3'=-3) & (a4'=-3) + 2.0* ((r_3 - r_0)/(1 - r_0))*(1-(r_3 - r_0)/(1 - r_0)): (a0'=1) & (a1'=1) & (a2'=1) & (a3'=1) & (a4'=-3) + 1.0* ((r_3 - r_0)/(1 - r_0))* ((r_3 - r_0)/(1 - r_0)): (a0'=1) & (a1'=1) & (a2'=1) & (a3'=1) & (a4'=1);
       []   a0 = 1 & a1 = 1 & a2 = 1 & a3 = -1 & a4 = -1 & b = 0  -> 1.0*(1-(r_3 - r_1)/(1 - r_1))*(1-(r_3 - r_1)/(1 - r_1)): (a0'=1) & (a1'=1) & (a2'=1) & (a3'=-3) & (a4'=-3) + 2.0* ((r_3 - r_1)/(1 - r_1))*(1-(r_3 - r_1)/(1 - r_1)): (a0'=1) & (a1'=1) & (a2'=1) & (a3'=1) & (a4'=-3) + 1.0* ((r_3 - r_1)/(1 - r_1))* ((r_3 - r_1)/(1 - r_1)): (a0'=1) & (a1'=1) & (a2'=1) & (a3'=1) & (a4'=1);
       []   a0 = 1 & a1 = 1 & a2 = 1 & a3 = -2 & a4 = -2 & b = 0  -> 1.0*(1-(r_3 - r_2)/(1 - r_2))*(1-(r_3 - r_2)/(1 - r_2)): (a0'=1) & (a1'=1) & (a2'=1) & (a3'=-3) & (a4'=-3) + 2.0* ((r_3 - r_2)/(1 - r_2))*(1-(r_3 - r_2)/(1 - r_2)): (a0'=1) & (a1'=1) & (a2'=1) & (a3'=1) & (a4'=-3) + 1.0* ((r_3 - r_2)/(1 - r_2))* ((r_3 - r_2)/(1 - r_2)): (a0'=1) & (a1'=1) & (a2'=1) & (a3'=1) & (a4'=1);
       []   a0 = 1 & a1 = 1 & a2 = 1 & a3 = 1 & a4 = 0 & b = 0  -> 1.0*(1-(r_4 - r_0)/(1 - r_0)): (a0'=1) & (a1'=1) & (a2'=1) & (a3'=1) & (a4'=-4) + 1.0* ((r_4 - r_0)/(1 - r_0)): (a0'=1) & (a1'=1) & (a2'=1) & (a3'=1) & (a4'=1);
       []   a0 = 1 & a1 = 1 & a2 = 1 & a3 = 1 & a4 = -1 & b = 0  -> 1.0*(1-(r_4 - r_1)/(1 - r_1)): (a0'=1) & (a1'=1) & (a2'=1) & (a3'=1) & (a4'=-4) + 1.0* ((r_4 - r_1)/(1 - r_1)): (a0'=1) & (a1'=1) & (a2'=1) & (a3'=1) & (a4'=1);
       []   a0 = 1 & a1 = 1 & a2 = 1 & a3 = 1 & a4 = -2 & b = 0  -> 1.0*(1-(r_4 - r_2)/(1 - r_2)): (a0'=1) & (a1'=1) & (a2'=1) & (a3'=1) & (a4'=-4) + 1.0* ((r_4 - r_2)/(1 - r_2)): (a0'=1) & (a1'=1) & (a2'=1) & (a3'=1) & (a4'=1);
       []   a0 = 1 & a1 = 1 & a2 = 1 & a3 = 1 & a4 = -3 & b = 0  -> 1.0*(1-(r_4 - r_3)/(1 - r_3)): (a0'=1) & (a1'=1) & (a2'=1) & (a3'=1) & (a4'=-4) + 1.0* ((r_4 - r_3)/(1 - r_3)): (a0'=1) & (a1'=1) & (a2'=1) & (a3'=1) & (a4'=1);

       // self-loops in BSCCs
       []   b=1 -> 1:(b'=1);

endmodule 

rewards "mean" 
       a0 = 0 & a1 = 0 & a2 = 0 & a3 = 0 & a4 = 0:0;
       a0 = 1 & a1 = -1 & a2 = -1 & a3 = -1 & a4 = -1:1;
       a0 = 1 & a1 = 1 & a2 = -2 & a3 = -2 & a4 = -2:2;
       a0 = 1 & a1 = 1 & a2 = 1 & a3 = -3 & a4 = -3:3;
       a0 = 1 & a1 = 1 & a2 = 1 & a3 = 1 & a4 = -4:4;
       a0 = 1 & a1 = 1 & a2 = 1 & a3 = 1 & a4 = 1:5;
endrewards 
rewards "mean_squared" 
       a0 = 0 & a1 = 0 & a2 = 0 & a3 = 0 & a4 = 0:0;
       a0 = 1 & a1 = -1 & a2 = -1 & a3 = -1 & a4 = -1:1;
       a0 = 1 & a1 = 1 & a2 = -2 & a3 = -2 & a4 = -2:4;
       a0 = 1 & a1 = 1 & a2 = 1 & a3 = -3 & a4 = -3:9;
       a0 = 1 & a1 = 1 & a2 = 1 & a3 = 1 & a4 = -4:16;
       a0 = 1 & a1 = 1 & a2 = 1 & a3 = 1 & a4 = 1:25;
endrewards 
rewards "mean_cubed" 
       a0 = 0 & a1 = 0 & a2 = 0 & a3 = 0 & a4 = 0:0;
       a0 = 1 & a1 = -1 & a2 = -1 & a3 = -1 & a4 = -1:1;
       a0 = 1 & a1 = 1 & a2 = -2 & a3 = -2 & a4 = -2:8;
       a0 = 1 & a1 = 1 & a2 = 1 & a3 = -3 & a4 = -3:27;
       a0 = 1 & a1 = 1 & a2 = 1 & a3 = 1 & a4 = -4:64;
       a0 = 1 & a1 = 1 & a2 = 1 & a3 = 1 & a4 = 1:125;
endrewards 
